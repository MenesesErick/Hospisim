// <auto-generated />
using System;
using Hospisim.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospisim.Migrations
{
    [DbContext(typeof(HospisimContext))]
    [Migration("20250610183037_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hospisim.Models.AltaHospitalar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CondicaoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataAlta")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstrucoesPosAlta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InternacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InternacaoId")
                        .IsUnique();

                    b.ToTable("AltasHospitalares");
                });

            modelBuilder.Entity("Hospisim.Models.Atendimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfissionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProntuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.HasIndex("ProfissionalId");

                    b.HasIndex("ProntuarioId");

                    b.ToTable("Atendimentos");
                });

            modelBuilder.Entity("Hospisim.Models.Especialidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Especialidades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5be4a08e-16fd-4794-bb89-d010afae7dbf"),
                            Nome = "Cardiologia"
                        },
                        new
                        {
                            Id = new Guid("00b0fc80-e429-4be6-a542-225faff625ff"),
                            Nome = "Pediatria"
                        },
                        new
                        {
                            Id = new Guid("21e051f6-14b8-4ad8-9c89-a028fa3b4453"),
                            Nome = "Ortopedia"
                        });
                });

            modelBuilder.Entity("Hospisim.Models.Exame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtendimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataRealizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataSolicitacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Resultado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoId");

                    b.ToTable("Exames");
                });

            modelBuilder.Entity("Hospisim.Models.Internacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtendimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("datetime2");

                    b.Property<string>("Leito")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotivoInternacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservacoesClinicas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanoSaudeUtilizado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PrevisaoAlta")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quarto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Setor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusInternacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoId")
                        .IsUnique();

                    b.ToTable("Internacoes");
                });

            modelBuilder.Entity("Hospisim.Models.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnderecoCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoCivil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumeroCartaoSUS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PossuiPlanoSaude")
                        .HasColumnType("bit");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoSanguineo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pacientes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f5fd9f7-5ab6-4b0e-890c-768878cf304c"),
                            CPF = "111.222.333-44",
                            DataNascimento = new DateTime(1980, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "joao.silva@example.com",
                            EnderecoCompleto = "Rua das Flores, 123, São Paulo, SP",
                            EstadoCivil = "Casado",
                            NomeCompleto = "João da Silva",
                            NumeroCartaoSUS = "987654321098765",
                            PossuiPlanoSaude = true,
                            Sexo = "Masculino",
                            Telefone = "(11) 98765-4321",
                            TipoSanguineo = "O+"
                        },
                        new
                        {
                            Id = new Guid("d1f9889a-ec87-4bfa-9498-1dfad1a85e87"),
                            CPF = "222.333.444-55",
                            DataNascimento = new DateTime(1992, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "maria.oliveira@example.com",
                            EnderecoCompleto = "Avenida Principal, 456, Rio de Janeiro, RJ",
                            EstadoCivil = "Solteira",
                            NomeCompleto = "Maria Oliveira",
                            NumeroCartaoSUS = "123456789012345",
                            PossuiPlanoSaude = false,
                            Sexo = "Feminino",
                            Telefone = "(21) 91234-5678",
                            TipoSanguineo = "A-"
                        });
                });

            modelBuilder.Entity("Hospisim.Models.Prescricao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtendimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosagem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacoes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfissionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReacoesAdversas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusPrescricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViaAdministracao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoId");

                    b.HasIndex("ProfissionalId");

                    b.ToTable("Prescricoes");
                });

            modelBuilder.Entity("Hospisim.Models.ProfissionalDeSaude", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CargaHorariaSemanal")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAdmissao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EspecialidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistroConselho")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoRegistro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Turno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadeId");

                    b.ToTable("ProfissionaisDeSaude");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ece2dd0c-5852-4c54-b886-c2e2d6502696"),
                            Ativo = true,
                            CPF = "333.444.555-66",
                            CargaHorariaSemanal = 40,
                            DataAdmissao = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "carlos.andrade@hospisim.com",
                            EspecialidadeId = new Guid("5be4a08e-16fd-4794-bb89-d010afae7dbf"),
                            NomeCompleto = "Dr. Carlos Andrade",
                            RegistroConselho = "CRM-SP 123456",
                            Telefone = "(11) 98888-7777",
                            TipoRegistro = "CRM",
                            Turno = "Manhã"
                        },
                        new
                        {
                            Id = new Guid("eeea9f91-41f3-465d-9324-0f0c8f42a004"),
                            Ativo = true,
                            CPF = "444.555.666-77",
                            CargaHorariaSemanal = 30,
                            DataAdmissao = new DateTime(2021, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ana.souza@hospisim.com",
                            EspecialidadeId = new Guid("00b0fc80-e429-4be6-a542-225faff625ff"),
                            NomeCompleto = "Dra. Ana Paula Souza",
                            RegistroConselho = "CRM-RJ 654321",
                            Telefone = "(21) 97777-6666",
                            TipoRegistro = "CRM",
                            Turno = "Tarde"
                        });
                });

            modelBuilder.Entity("Hospisim.Models.Prontuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAbertura")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumeroProntuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservacoesGerais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("Prontuarios");
                });

            modelBuilder.Entity("Hospisim.Models.AltaHospitalar", b =>
                {
                    b.HasOne("Hospisim.Models.Internacao", "Internacao")
                        .WithOne("AltaHospitalar")
                        .HasForeignKey("Hospisim.Models.AltaHospitalar", "InternacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Internacao");
                });

            modelBuilder.Entity("Hospisim.Models.Atendimento", b =>
                {
                    b.HasOne("Hospisim.Models.Paciente", "Paciente")
                        .WithMany("Atendimentos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospisim.Models.ProfissionalDeSaude", "Profissional")
                        .WithMany("Atendimentos")
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospisim.Models.Prontuario", "Prontuario")
                        .WithMany("Atendimentos")
                        .HasForeignKey("ProntuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Profissional");

                    b.Navigation("Prontuario");
                });

            modelBuilder.Entity("Hospisim.Models.Exame", b =>
                {
                    b.HasOne("Hospisim.Models.Atendimento", "Atendimento")
                        .WithMany("Exames")
                        .HasForeignKey("AtendimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atendimento");
                });

            modelBuilder.Entity("Hospisim.Models.Internacao", b =>
                {
                    b.HasOne("Hospisim.Models.Atendimento", "Atendimento")
                        .WithOne("Internacao")
                        .HasForeignKey("Hospisim.Models.Internacao", "AtendimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atendimento");
                });

            modelBuilder.Entity("Hospisim.Models.Prescricao", b =>
                {
                    b.HasOne("Hospisim.Models.Atendimento", "Atendimento")
                        .WithMany("Prescricoes")
                        .HasForeignKey("AtendimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospisim.Models.ProfissionalDeSaude", "Profissional")
                        .WithMany("Prescricoes")
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Atendimento");

                    b.Navigation("Profissional");
                });

            modelBuilder.Entity("Hospisim.Models.ProfissionalDeSaude", b =>
                {
                    b.HasOne("Hospisim.Models.Especialidade", "Especialidade")
                        .WithMany("Profissionais")
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialidade");
                });

            modelBuilder.Entity("Hospisim.Models.Prontuario", b =>
                {
                    b.HasOne("Hospisim.Models.Paciente", "Paciente")
                        .WithMany("Prontuarios")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Hospisim.Models.Atendimento", b =>
                {
                    b.Navigation("Exames");

                    b.Navigation("Internacao");

                    b.Navigation("Prescricoes");
                });

            modelBuilder.Entity("Hospisim.Models.Especialidade", b =>
                {
                    b.Navigation("Profissionais");
                });

            modelBuilder.Entity("Hospisim.Models.Internacao", b =>
                {
                    b.Navigation("AltaHospitalar");
                });

            modelBuilder.Entity("Hospisim.Models.Paciente", b =>
                {
                    b.Navigation("Atendimentos");

                    b.Navigation("Prontuarios");
                });

            modelBuilder.Entity("Hospisim.Models.ProfissionalDeSaude", b =>
                {
                    b.Navigation("Atendimentos");

                    b.Navigation("Prescricoes");
                });

            modelBuilder.Entity("Hospisim.Models.Prontuario", b =>
                {
                    b.Navigation("Atendimentos");
                });
#pragma warning restore 612, 618
        }
    }
}
