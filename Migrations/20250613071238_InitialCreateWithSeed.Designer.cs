// <auto-generated />
using System;
using Hospisim.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospisim.Migrations
{
    [DbContext(typeof(HospisimContext))]
    [Migration("20250613071238_InitialCreateWithSeed")]
    partial class InitialCreateWithSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hospisim.Models.AltaHospitalar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CondicaoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataAlta")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstrucoesPosAlta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InternacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InternacaoId")
                        .IsUnique();

                    b.ToTable("AltasHospitalares");

                    b.HasData(
                        new
                        {
                            Id = new Guid("341baf34-e8d8-401f-a33a-76aed737e98f"),
                            CondicaoPaciente = "Estável, com recomendação de repouso e fisioterapia.",
                            DataAlta = new DateTime(2025, 5, 12, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            InstrucoesPosAlta = "Manter o pé elevado, evitar esforço por 15 dias e iniciar fisioterapia na próxima semana.",
                            InternacaoId = new Guid("15b2dadc-cdec-4a43-ad2c-af122c38d093")
                        });
                });

            modelBuilder.Entity("Hospisim.Models.Atendimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfissionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProntuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.HasIndex("ProfissionalId");

                    b.HasIndex("ProntuarioId");

                    b.ToTable("Atendimentos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3e99f4b-176f-41e7-b527-470a945e727c"),
                            DataHora = new DateTime(2024, 10, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Local = "Consultório 101",
                            PacienteId = new Guid("dae56b6e-9a48-4349-b4f5-326186d3118f"),
                            ProfissionalId = new Guid("0cc07cee-6b24-413c-8418-0cf6823226e3"),
                            ProntuarioId = new Guid("0ccfef26-a34e-4403-ab2c-1a94ffcd0f25"),
                            Status = "Realizado",
                            Tipo = "Consulta"
                        },
                        new
                        {
                            Id = new Guid("6eaf4ab6-0f45-415c-9a60-1a79c9c3aa20"),
                            DataHora = new DateTime(2025, 3, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Local = "Consultório 101",
                            PacienteId = new Guid("dae56b6e-9a48-4349-b4f5-326186d3118f"),
                            ProfissionalId = new Guid("0cc07cee-6b24-413c-8418-0cf6823226e3"),
                            ProntuarioId = new Guid("0ccfef26-a34e-4403-ab2c-1a94ffcd0f25"),
                            Status = "Realizado",
                            Tipo = "Retorno"
                        },
                        new
                        {
                            Id = new Guid("b343d049-7078-447f-b6f8-d44efa0263dc"),
                            DataHora = new DateTime(2025, 4, 12, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Local = "Dermatologia - Sala 3",
                            PacienteId = new Guid("7b2b6527-66f4-4304-b8c4-4ef12dd7a4c3"),
                            ProfissionalId = new Guid("818cdb2b-59c5-456a-88fa-ad8de3030bbd"),
                            ProntuarioId = new Guid("d3d01ef6-c399-454f-936b-73134234bb54"),
                            Status = "Realizado",
                            Tipo = "Primeira Consulta"
                        },
                        new
                        {
                            Id = new Guid("7930304d-ec2c-49c3-a345-6a56bdd2043c"),
                            DataHora = new DateTime(2025, 6, 20, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Local = "Dermatologia - Sala 3",
                            PacienteId = new Guid("7b2b6527-66f4-4304-b8c4-4ef12dd7a4c3"),
                            ProfissionalId = new Guid("818cdb2b-59c5-456a-88fa-ad8de3030bbd"),
                            ProntuarioId = new Guid("d3d01ef6-c399-454f-936b-73134234bb54"),
                            Status = "Agendado",
                            Tipo = "Retorno"
                        },
                        new
                        {
                            Id = new Guid("c03c6136-2282-4585-b537-b378c27f3c72"),
                            DataHora = new DateTime(2025, 5, 5, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Local = "Pediatria - Sala 1",
                            PacienteId = new Guid("6d508ef8-d548-4049-9a36-f29402b364ae"),
                            ProfissionalId = new Guid("17822355-7037-40e5-b324-4e3ec65b5e06"),
                            ProntuarioId = new Guid("77e05cb5-444d-4486-8f66-1d88e2274ffc"),
                            Status = "Realizado",
                            Tipo = "Consulta Pediátrica"
                        },
                        new
                        {
                            Id = new Guid("045f3192-90f2-4eb7-87a5-47c495f407c0"),
                            DataHora = new DateTime(2025, 5, 10, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Local = "Emergência - Leito 5",
                            PacienteId = new Guid("a607bd61-5581-47bf-9d83-527c8935e4d0"),
                            ProfissionalId = new Guid("c5cc31ba-c713-496f-b908-c64519ca6069"),
                            ProntuarioId = new Guid("cfd7b580-ba91-40be-b6b0-eb2ec335dd4a"),
                            Status = "Realizado",
                            Tipo = "Emergência"
                        },
                        new
                        {
                            Id = new Guid("7928ac45-23e9-4c77-8dc3-d17e46bb04c9"),
                            DataHora = new DateTime(2024, 1, 20, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Local = "Consultório 202",
                            PacienteId = new Guid("97269dd1-6c31-41d1-b4c7-de9e9ff12fa4"),
                            ProfissionalId = new Guid("6d7fd56b-b109-43a4-8fa9-6bb0b0791969"),
                            ProntuarioId = new Guid("1b020965-722d-4a76-a77d-0312e637ad3a"),
                            Status = "Cancelado",
                            Tipo = "Consulta"
                        },
                        new
                        {
                            Id = new Guid("20541787-e695-4258-bb81-f5702cefe378"),
                            DataHora = new DateTime(2025, 6, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Local = "Ortopedia - Sala 2",
                            PacienteId = new Guid("5f4e24fc-fe07-4e87-a975-4240c490b40d"),
                            ProfissionalId = new Guid("1b556ce0-1cfd-4af2-a630-ba9564c6e484"),
                            ProntuarioId = new Guid("f413cfce-0b29-4dd7-98c6-20a7ef673a43"),
                            Status = "Agendado",
                            Tipo = "Consulta Ortopédica"
                        },
                        new
                        {
                            Id = new Guid("7ce97972-19ae-454d-908c-53f0d8e03ac9"),
                            DataHora = new DateTime(2025, 4, 30, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Local = "Cardiologia - Sala de Exames",
                            PacienteId = new Guid("ce888b9e-6b86-4a69-bc4e-17fcb11a5185"),
                            ProfissionalId = new Guid("0cc07cee-6b24-413c-8418-0cf6823226e3"),
                            ProntuarioId = new Guid("ec41ff48-4bdc-4582-bf57-bcc440af6976"),
                            Status = "Realizado",
                            Tipo = "Check-up Cardiológico"
                        },
                        new
                        {
                            Id = new Guid("066103d7-cc6a-4cea-98b7-d6defbebe777"),
                            DataHora = new DateTime(2025, 6, 15, 13, 20, 0, 0, DateTimeKind.Unspecified),
                            Local = "Dermatologia - Sala 1",
                            PacienteId = new Guid("54f4ef2f-d788-44f5-b4ea-a885ffc59597"),
                            ProfissionalId = new Guid("ff8ec356-17a5-4739-8135-ebe89f9b242f"),
                            ProntuarioId = new Guid("2d461a0d-c2fe-4598-a6c5-45b53d34dae9"),
                            Status = "Agendado",
                            Tipo = "Consulta"
                        },
                        new
                        {
                            Id = new Guid("3a2d2590-e382-4ec2-920c-a0259d3eecb6"),
                            DataHora = new DateTime(2025, 2, 10, 10, 40, 0, 0, DateTimeKind.Unspecified),
                            Local = "Consultório 202",
                            PacienteId = new Guid("c1ad208e-856f-4e4f-a076-935601580d92"),
                            ProfissionalId = new Guid("6d7fd56b-b109-43a4-8fa9-6bb0b0791969"),
                            ProntuarioId = new Guid("c63bba87-eafc-40b5-b7e0-2854d7c19fe4"),
                            Status = "Cancelado",
                            Tipo = "Consulta"
                        },
                        new
                        {
                            Id = new Guid("95260cf7-a385-429e-88c7-567541f1d97e"),
                            DataHora = new DateTime(2025, 5, 22, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Local = "Ortopedia - Sala 5",
                            PacienteId = new Guid("8f9fb19c-8987-4816-bbbd-bd3dea802f68"),
                            ProfissionalId = new Guid("c5cc31ba-c713-496f-b908-c64519ca6069"),
                            ProntuarioId = new Guid("1050beea-d5c6-44d6-a3fe-204ae095ec4f"),
                            Status = "Realizado",
                            Tipo = "Retorno"
                        },
                        new
                        {
                            Id = new Guid("1277c3ba-3794-4964-8512-91bdddc6e986"),
                            DataHora = new DateTime(2025, 3, 3, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Local = "Triagem",
                            PacienteId = new Guid("7b2b6527-66f4-4304-b8c4-4ef12dd7a4c3"),
                            ProfissionalId = new Guid("b9f1f1d0-46b8-4c17-a3be-88b7f161feb7"),
                            ProntuarioId = new Guid("d3d01ef6-c399-454f-936b-73134234bb54"),
                            Status = "Realizado",
                            Tipo = "Atendimento de Enfermagem"
                        },
                        new
                        {
                            Id = new Guid("86d4e2c6-1309-4620-8ca4-7ac42d96e8d4"),
                            DataHora = new DateTime(2025, 7, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Local = "Pediatria - Sala 1",
                            PacienteId = new Guid("6d508ef8-d548-4049-9a36-f29402b364ae"),
                            ProfissionalId = new Guid("17822355-7037-40e5-b324-4e3ec65b5e06"),
                            ProntuarioId = new Guid("77e05cb5-444d-4486-8f66-1d88e2274ffc"),
                            Status = "Agendado",
                            Tipo = "Consulta de Rotina"
                        },
                        new
                        {
                            Id = new Guid("59c8e80b-e057-4be8-8545-6282a18da3a1"),
                            DataHora = new DateTime(2025, 6, 5, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            Local = "UTI - Leito 3",
                            PacienteId = new Guid("dae56b6e-9a48-4349-b4f5-326186d3118f"),
                            ProfissionalId = new Guid("8457597c-08cf-4291-b591-00c145173389"),
                            ProntuarioId = new Guid("0ccfef26-a34e-4403-ab2c-1a94ffcd0f25"),
                            Status = "Realizado",
                            Tipo = "Atendimento de Enfermagem"
                        });
                });

            modelBuilder.Entity("Hospisim.Models.Especialidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Especialidades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03e408e2-49c7-49e0-aed1-049cf1c08f93"),
                            Nome = "Cardiologia"
                        },
                        new
                        {
                            Id = new Guid("f925f653-027f-43d3-9b13-198e853a9b2c"),
                            Nome = "Pediatria"
                        },
                        new
                        {
                            Id = new Guid("3cfe9e0f-92a4-4960-b027-64babc353d60"),
                            Nome = "Ortopedia"
                        },
                        new
                        {
                            Id = new Guid("530848b2-54b5-4e8b-a725-2a2b566ea3c1"),
                            Nome = "Dermatologia"
                        },
                        new
                        {
                            Id = new Guid("c1805cf9-20fd-4478-8683-95008147f00d"),
                            Nome = "Neurologia"
                        });
                });

            modelBuilder.Entity("Hospisim.Models.Exame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtendimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataRealizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataSolicitacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Resultado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoId");

                    b.ToTable("Exames");

                    b.HasData(
                        new
                        {
                            Id = new Guid("022559cb-357f-442a-ae5c-63435e335c15"),
                            AtendimentoId = new Guid("7ce97972-19ae-454d-908c-53f0d8e03ac9"),
                            DataRealizacao = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2025, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resultado = "Todos os índices dentro do padrão de normalidade.",
                            Status = "Resultado Disponível",
                            Tipo = "Hemograma Completo"
                        },
                        new
                        {
                            Id = new Guid("cd847f98-3ac8-49f4-8842-75e5f571f5db"),
                            AtendimentoId = new Guid("045f3192-90f2-4eb7-87a5-47c495f407c0"),
                            DataRealizacao = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSolicitacao = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Realizado",
                            Tipo = "Raio-X do Tornozelo Esquerdo"
                        },
                        new
                        {
                            Id = new Guid("0d153812-3b07-4a10-9c8a-934bb5fe90ff"),
                            AtendimentoId = new Guid("b343d049-7078-447f-b6f8-d44efa0263dc"),
                            DataSolicitacao = new DateTime(2025, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Solicitado",
                            Tipo = "Biópsia de pele"
                        });
                });

            modelBuilder.Entity("Hospisim.Models.Internacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtendimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("datetime2");

                    b.Property<string>("Leito")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotivoInternacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservacoesClinicas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanoSaudeUtilizado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PrevisaoAlta")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quarto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Setor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusInternacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoId")
                        .IsUnique();

                    b.ToTable("Internacoes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15b2dadc-cdec-4a43-ad2c-af122c38d093"),
                            AtendimentoId = new Guid("045f3192-90f2-4eb7-87a5-47c495f407c0"),
                            DataEntrada = new DateTime(2025, 5, 10, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Leito = "204-A",
                            MotivoInternacao = "Fratura no tornozelo esquerdo para observação e cirurgia.",
                            ObservacoesClinicas = "Paciente evoluindo bem no pós-operatório.",
                            PrevisaoAlta = new DateTime(2025, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quarto = "204",
                            Setor = "Ortopedia",
                            StatusInternacao = "Alta concedida"
                        },
                        new
                        {
                            Id = new Guid("6c18ea96-3b4b-4bed-a33b-9ab8db1a2f71"),
                            AtendimentoId = new Guid("59c8e80b-e057-4be8-8545-6282a18da3a1"),
                            DataEntrada = new DateTime(2025, 6, 5, 22, 5, 0, 0, DateTimeKind.Unspecified),
                            Leito = "UTI-02",
                            MotivoInternacao = "Monitoramento cardíaco pós-procedimento.",
                            ObservacoesClinicas = "Sinais vitais estáveis.",
                            Quarto = "UTI",
                            Setor = "UTI",
                            StatusInternacao = "Ativa"
                        });
                });

            modelBuilder.Entity("Hospisim.Models.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnderecoCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoCivil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumeroCartaoSUS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PossuiPlanoSaude")
                        .HasColumnType("bit");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoSanguineo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pacientes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dae56b6e-9a48-4349-b4f5-326186d3118f"),
                            CPF = "111.222.333-01",
                            DataNascimento = new DateTime(1985, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "carlos.lima@example.com",
                            EnderecoCompleto = "Rua das Flores, 101, São Paulo, SP",
                            EstadoCivil = "Casado",
                            NomeCompleto = "Carlos Eduardo Lima",
                            NumeroCartaoSUS = "123456789012345",
                            PossuiPlanoSaude = true,
                            Sexo = "Masculino",
                            Telefone = "11987654321",
                            TipoSanguineo = "A+"
                        },
                        new
                        {
                            Id = new Guid("7b2b6527-66f4-4304-b8c4-4ef12dd7a4c3"),
                            CPF = "222.333.444-02",
                            DataNascimento = new DateTime(1992, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ana.costa@example.com",
                            EnderecoCompleto = "Av. Principal, 202, Rio de Janeiro, RJ",
                            EstadoCivil = "Solteira",
                            NomeCompleto = "Ana Beatriz Costa",
                            NumeroCartaoSUS = "234567890123456",
                            PossuiPlanoSaude = false,
                            Sexo = "Feminino",
                            Telefone = "21912345678",
                            TipoSanguineo = "O-"
                        },
                        new
                        {
                            Id = new Guid("6d508ef8-d548-4049-9a36-f29402b364ae"),
                            CPF = "333.444.555-03",
                            DataNascimento = new DateTime(2018, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "joao.martins@example.com",
                            EnderecoCompleto = "Rua da Paz, 303, Belo Horizonte, MG",
                            EstadoCivil = "Solteiro",
                            NomeCompleto = "João Pedro Martins",
                            NumeroCartaoSUS = "345678901234567",
                            PossuiPlanoSaude = true,
                            Sexo = "Masculino",
                            Telefone = "31923456789",
                            TipoSanguineo = "B+"
                        },
                        new
                        {
                            Id = new Guid("a607bd61-5581-47bf-9d83-527c8935e4d0"),
                            CPF = "444.555.666-04",
                            DataNascimento = new DateTime(1976, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mariana.alves@example.com",
                            EnderecoCompleto = "Travessa dos Sonhos, 404, Curitiba, PR",
                            EstadoCivil = "Divorciada",
                            NomeCompleto = "Mariana Fernandes Alves",
                            NumeroCartaoSUS = "456789012345678",
                            PossuiPlanoSaude = true,
                            Sexo = "Feminino",
                            Telefone = "41934567890",
                            TipoSanguineo = "AB+"
                        },
                        new
                        {
                            Id = new Guid("97269dd1-6c31-41d1-b4c7-de9e9ff12fa4"),
                            CPF = "555.666.777-05",
                            DataNascimento = new DateTime(2001, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lucas.souza@example.com",
                            EnderecoCompleto = "Alameda dos Anjos, 505, Porto Alegre, RS",
                            EstadoCivil = "Solteiro",
                            NomeCompleto = "Lucas Gabriel Souza",
                            NumeroCartaoSUS = "567890123456789",
                            PossuiPlanoSaude = false,
                            Sexo = "Masculino",
                            Telefone = "51945678901",
                            TipoSanguineo = "A-"
                        },
                        new
                        {
                            Id = new Guid("5f4e24fc-fe07-4e87-a975-4240c490b40d"),
                            CPF = "666.777.888-06",
                            DataNascimento = new DateTime(1964, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "julia.santos@example.com",
                            EnderecoCompleto = "Praça Central, 606, Brasília, DF",
                            EstadoCivil = "Viúva",
                            NomeCompleto = "Julia Ribeiro Santos",
                            NumeroCartaoSUS = "678901234567890",
                            PossuiPlanoSaude = false,
                            Sexo = "Feminino",
                            Telefone = "61956789012",
                            TipoSanguineo = "O+"
                        },
                        new
                        {
                            Id = new Guid("ce888b9e-6b86-4a69-bc4e-17fcb11a5185"),
                            CPF = "777.888.999-07",
                            DataNascimento = new DateTime(1988, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "rafael.lima@example.com",
                            EnderecoCompleto = "Av. Beira Mar, 707, Salvador, BA",
                            EstadoCivil = "Casado",
                            NomeCompleto = "Rafael Oliveira Lima",
                            NumeroCartaoSUS = "789012345678901",
                            PossuiPlanoSaude = true,
                            Sexo = "Masculino",
                            Telefone = "71967890123",
                            TipoSanguineo = "B-"
                        },
                        new
                        {
                            Id = new Guid("54f4ef2f-d788-44f5-b4ea-a885ffc59597"),
                            CPF = "888.999.000-08",
                            DataNascimento = new DateTime(1999, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "isabela.gomes@example.com",
                            EnderecoCompleto = "Rua do Sol, 808, Recife, PE",
                            EstadoCivil = "Solteira",
                            NomeCompleto = "Isabela Pereira Gomes",
                            NumeroCartaoSUS = "890123456789012",
                            PossuiPlanoSaude = false,
                            Sexo = "Feminino",
                            Telefone = "81978901234",
                            TipoSanguineo = "AB-"
                        },
                        new
                        {
                            Id = new Guid("c1ad208e-856f-4e4f-a076-935601580d92"),
                            CPF = "999.000.111-09",
                            DataNascimento = new DateTime(1955, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mateus.rocha@example.com",
                            EnderecoCompleto = "Largo das Neves, 909, Belém, PA",
                            EstadoCivil = "Casado",
                            NomeCompleto = "Mateus Correia Rocha",
                            NumeroCartaoSUS = "901234567890123",
                            PossuiPlanoSaude = true,
                            Sexo = "Masculino",
                            Telefone = "91989012345",
                            TipoSanguineo = "A+"
                        },
                        new
                        {
                            Id = new Guid("8f9fb19c-8987-4816-bbbd-bd3dea802f68"),
                            CPF = "000.111.222-10",
                            DataNascimento = new DateTime(2005, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "laura.cunha@example.com",
                            EnderecoCompleto = "Viela da Lua, 1010, Fortaleza, CE",
                            EstadoCivil = "Solteira",
                            NomeCompleto = "Laura Azevedo Cunha",
                            NumeroCartaoSUS = "012345678901234",
                            PossuiPlanoSaude = true,
                            Sexo = "Feminino",
                            Telefone = "85990123456",
                            TipoSanguineo = "O+"
                        });
                });

            modelBuilder.Entity("Hospisim.Models.Prescricao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtendimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosagem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacoes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfissionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReacoesAdversas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusPrescricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViaAdministracao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoId");

                    b.HasIndex("ProfissionalId");

                    b.ToTable("Prescricoes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4640eced-b0a6-4f84-bb1e-874bf0c07b7c"),
                            AtendimentoId = new Guid("c3e99f4b-176f-41e7-b527-470a945e727c"),
                            DataInicio = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "1 comprimido",
                            Frequencia = "1 vez ao dia, à noite",
                            Medicamento = "Sinvastatina 20mg",
                            ProfissionalId = new Guid("0cc07cee-6b24-413c-8418-0cf6823226e3"),
                            StatusPrescricao = "Ativa",
                            ViaAdministracao = "Oral"
                        },
                        new
                        {
                            Id = new Guid("7cad31d7-dfd8-4ff7-9ef6-3691793667a8"),
                            AtendimentoId = new Guid("c03c6136-2282-4585-b537-b378c27f3c72"),
                            DataInicio = new DateTime(2025, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "5ml",
                            Frequencia = "De 8 em 8 horas por 7 dias",
                            Medicamento = "Amoxicilina 250mg/5ml",
                            ProfissionalId = new Guid("17822355-7037-40e5-b324-4e3ec65b5e06"),
                            StatusPrescricao = "Encerrada",
                            ViaAdministracao = "Oral"
                        },
                        new
                        {
                            Id = new Guid("37cd556c-4d6a-4690-824a-160abb03ea63"),
                            AtendimentoId = new Guid("045f3192-90f2-4eb7-87a5-47c495f407c0"),
                            DataInicio = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "1 comprimido",
                            Frequencia = "De 12 em 12 horas por 3 dias",
                            Medicamento = "Torsilax",
                            ProfissionalId = new Guid("c5cc31ba-c713-496f-b908-c64519ca6069"),
                            StatusPrescricao = "Ativa",
                            ViaAdministracao = "Oral"
                        },
                        new
                        {
                            Id = new Guid("4002d9e9-c586-4125-ad35-4116fe6f1327"),
                            AtendimentoId = new Guid("7ce97972-19ae-454d-908c-53f0d8e03ac9"),
                            DataInicio = new DateTime(2025, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dosagem = "1 comprimido",
                            Frequencia = "1 vez ao dia",
                            Medicamento = "AAS Infantil 100mg",
                            ProfissionalId = new Guid("0cc07cee-6b24-413c-8418-0cf6823226e3"),
                            StatusPrescricao = "Ativa",
                            ViaAdministracao = "Oral"
                        });
                });

            modelBuilder.Entity("Hospisim.Models.ProfissionalDeSaude", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CargaHorariaSemanal")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAdmissao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EspecialidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistroConselho")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoRegistro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Turno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadeId");

                    b.ToTable("ProfissionaisDeSaude");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0cc07cee-6b24-413c-8418-0cf6823226e3"),
                            Ativo = true,
                            CPF = "123.456.789-01",
                            CargaHorariaSemanal = 40,
                            DataAdmissao = new DateTime(2019, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "helena.correa@hospisim.com",
                            EspecialidadeId = new Guid("03e408e2-49c7-49e0-aed1-049cf1c08f93"),
                            NomeCompleto = "Dra. Helena Corrêa",
                            RegistroConselho = "CRM-SP 111111",
                            Telefone = "11991112222",
                            TipoRegistro = "CRM",
                            Turno = "Manhã"
                        },
                        new
                        {
                            Id = new Guid("17822355-7037-40e5-b324-4e3ec65b5e06"),
                            Ativo = true,
                            CPF = "123.456.789-02",
                            CargaHorariaSemanal = 36,
                            DataAdmissao = new DateTime(2020, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bruno.faria@hospisim.com",
                            EspecialidadeId = new Guid("f925f653-027f-43d3-9b13-198e853a9b2c"),
                            NomeCompleto = "Dr. Bruno Faria",
                            RegistroConselho = "CRM-RJ 222222",
                            Telefone = "21992223333",
                            TipoRegistro = "CRM",
                            Turno = "Tarde"
                        },
                        new
                        {
                            Id = new Guid("b9f1f1d0-46b8-4c17-a3be-88b7f161feb7"),
                            Ativo = true,
                            CPF = "123.456.789-03",
                            CargaHorariaSemanal = 40,
                            DataAdmissao = new DateTime(2018, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lucia.mendes@hospisim.com",
                            EspecialidadeId = new Guid("f925f653-027f-43d3-9b13-198e853a9b2c"),
                            NomeCompleto = "Enf. Lúcia Mendes",
                            RegistroConselho = "COREN-MG 333333",
                            Telefone = "31993334444",
                            TipoRegistro = "COREN",
                            Turno = "Noite"
                        },
                        new
                        {
                            Id = new Guid("c5cc31ba-c713-496f-b908-c64519ca6069"),
                            Ativo = true,
                            CPF = "123.456.789-04",
                            CargaHorariaSemanal = 44,
                            DataAdmissao = new DateTime(2022, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ricardo.nunes@hospisim.com",
                            EspecialidadeId = new Guid("3cfe9e0f-92a4-4960-b027-64babc353d60"),
                            NomeCompleto = "Dr. Ricardo Nunes",
                            RegistroConselho = "CRM-PR 444444",
                            Telefone = "41994445555",
                            TipoRegistro = "CRM",
                            Turno = "Integral"
                        },
                        new
                        {
                            Id = new Guid("818cdb2b-59c5-456a-88fa-ad8de3030bbd"),
                            Ativo = true,
                            CPF = "123.456.789-05",
                            CargaHorariaSemanal = 20,
                            DataAdmissao = new DateTime(2021, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "patricia.moreira@hospisim.com",
                            EspecialidadeId = new Guid("530848b2-54b5-4e8b-a725-2a2b566ea3c1"),
                            NomeCompleto = "Dra. Patrícia Moreira",
                            RegistroConselho = "CRM-RS 555555",
                            Telefone = "51995556666",
                            TipoRegistro = "CRM",
                            Turno = "Tarde"
                        },
                        new
                        {
                            Id = new Guid("6d7fd56b-b109-43a4-8fa9-6bb0b0791969"),
                            Ativo = false,
                            CPF = "123.456.789-06",
                            CargaHorariaSemanal = 40,
                            DataAdmissao = new DateTime(2017, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fabio.gusmao@hospisim.com",
                            EspecialidadeId = new Guid("c1805cf9-20fd-4478-8683-95008147f00d"),
                            NomeCompleto = "Dr. Fábio Gusmão",
                            RegistroConselho = "CRM-DF 666666",
                            Telefone = "61996667777",
                            TipoRegistro = "CRM",
                            Turno = "Manhã"
                        },
                        new
                        {
                            Id = new Guid("8457597c-08cf-4291-b591-00c145173389"),
                            Ativo = true,
                            CPF = "123.456.789-07",
                            CargaHorariaSemanal = 40,
                            DataAdmissao = new DateTime(2023, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "roberto.dias@hospisim.com",
                            EspecialidadeId = new Guid("03e408e2-49c7-49e0-aed1-049cf1c08f93"),
                            NomeCompleto = "Enf. Roberto Dias",
                            RegistroConselho = "COREN-BA 777777",
                            Telefone = "71997778888",
                            TipoRegistro = "COREN",
                            Turno = "Noite"
                        },
                        new
                        {
                            Id = new Guid("ff8ec356-17a5-4739-8135-ebe89f9b242f"),
                            Ativo = true,
                            CPF = "123.456.789-08",
                            CargaHorariaSemanal = 30,
                            DataAdmissao = new DateTime(2022, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "simone.braga@hospisim.com",
                            EspecialidadeId = new Guid("530848b2-54b5-4e8b-a725-2a2b566ea3c1"),
                            NomeCompleto = "Dra. Simone Braga",
                            RegistroConselho = "CRM-PE 888888",
                            Telefone = "81998889999",
                            TipoRegistro = "CRM",
                            Turno = "Tarde"
                        },
                        new
                        {
                            Id = new Guid("1b556ce0-1cfd-4af2-a630-ba9564c6e484"),
                            Ativo = true,
                            CPF = "123.456.789-09",
                            CargaHorariaSemanal = 40,
                            DataAdmissao = new DateTime(2023, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "andre.villas@hospisim.com",
                            EspecialidadeId = new Guid("3cfe9e0f-92a4-4960-b027-64babc353d60"),
                            NomeCompleto = "Dr. André Villas",
                            RegistroConselho = "CRM-PA 999999",
                            Telefone = "91999990000",
                            TipoRegistro = "CRM",
                            Turno = "Integral"
                        },
                        new
                        {
                            Id = new Guid("a4a9fb63-c9cb-4392-9d6b-a421a6300556"),
                            Ativo = true,
                            CPF = "123.456.789-10",
                            CargaHorariaSemanal = 25,
                            DataAdmissao = new DateTime(2020, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marcos.telles@hospisim.com",
                            EspecialidadeId = new Guid("c1805cf9-20fd-4478-8683-95008147f00d"),
                            NomeCompleto = "Dr. Marcos Telles",
                            RegistroConselho = "CRM-CE 101010",
                            Telefone = "85990001111",
                            TipoRegistro = "CRM",
                            Turno = "Manhã"
                        });
                });

            modelBuilder.Entity("Hospisim.Models.Prontuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAbertura")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumeroProntuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservacoesGerais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("Prontuarios");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ccfef26-a34e-4403-ab2c-1a94ffcd0f25"),
                            DataAbertura = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PRONT-00001",
                            ObservacoesGerais = "Paciente com histórico de hipertensão.",
                            PacienteId = new Guid("dae56b6e-9a48-4349-b4f5-326186d3118f")
                        },
                        new
                        {
                            Id = new Guid("d3d01ef6-c399-454f-936b-73134234bb54"),
                            DataAbertura = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PRONT-00002",
                            ObservacoesGerais = "Alergia a penicilina.",
                            PacienteId = new Guid("7b2b6527-66f4-4304-b8c4-4ef12dd7a4c3")
                        },
                        new
                        {
                            Id = new Guid("77e05cb5-444d-4486-8f66-1d88e2274ffc"),
                            DataAbertura = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PRONT-00003",
                            ObservacoesGerais = "Acompanhamento pediátrico regular.",
                            PacienteId = new Guid("6d508ef8-d548-4049-9a36-f29402b364ae")
                        },
                        new
                        {
                            Id = new Guid("cfd7b580-ba91-40be-b6b0-eb2ec335dd4a"),
                            DataAbertura = new DateTime(2023, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PRONT-00004",
                            ObservacoesGerais = "",
                            PacienteId = new Guid("a607bd61-5581-47bf-9d83-527c8935e4d0")
                        },
                        new
                        {
                            Id = new Guid("1b020965-722d-4a76-a77d-0312e637ad3a"),
                            DataAbertura = new DateTime(2023, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PRONT-00005",
                            ObservacoesGerais = "Asma crônica.",
                            PacienteId = new Guid("97269dd1-6c31-41d1-b4c7-de9e9ff12fa4")
                        },
                        new
                        {
                            Id = new Guid("f413cfce-0b29-4dd7-98c6-20a7ef673a43"),
                            DataAbertura = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PRONT-00006",
                            ObservacoesGerais = "Diabetes tipo 2.",
                            PacienteId = new Guid("5f4e24fc-fe07-4e87-a975-4240c490b40d")
                        },
                        new
                        {
                            Id = new Guid("ec41ff48-4bdc-4582-bf57-bcc440af6976"),
                            DataAbertura = new DateTime(2023, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PRONT-00007",
                            ObservacoesGerais = "",
                            PacienteId = new Guid("ce888b9e-6b86-4a69-bc4e-17fcb11a5185")
                        },
                        new
                        {
                            Id = new Guid("2d461a0d-c2fe-4598-a6c5-45b53d34dae9"),
                            DataAbertura = new DateTime(2023, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PRONT-00008",
                            ObservacoesGerais = "Tratamento dermatológico em andamento.",
                            PacienteId = new Guid("54f4ef2f-d788-44f5-b4ea-a885ffc59597")
                        },
                        new
                        {
                            Id = new Guid("c63bba87-eafc-40b5-b7e0-2854d7c19fe4"),
                            DataAbertura = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PRONT-00009",
                            ObservacoesGerais = "Histórico de enxaqueca.",
                            PacienteId = new Guid("c1ad208e-856f-4e4f-a076-935601580d92")
                        },
                        new
                        {
                            Id = new Guid("1050beea-d5c6-44d6-a3fe-204ae095ec4f"),
                            DataAbertura = new DateTime(2023, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroProntuario = "PRONT-00010",
                            ObservacoesGerais = "Acompanhamento ortopédico.",
                            PacienteId = new Guid("8f9fb19c-8987-4816-bbbd-bd3dea802f68")
                        });
                });

            modelBuilder.Entity("Hospisim.Models.AltaHospitalar", b =>
                {
                    b.HasOne("Hospisim.Models.Internacao", "Internacao")
                        .WithOne("AltaHospitalar")
                        .HasForeignKey("Hospisim.Models.AltaHospitalar", "InternacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Internacao");
                });

            modelBuilder.Entity("Hospisim.Models.Atendimento", b =>
                {
                    b.HasOne("Hospisim.Models.Paciente", "Paciente")
                        .WithMany("Atendimentos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospisim.Models.ProfissionalDeSaude", "Profissional")
                        .WithMany("Atendimentos")
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospisim.Models.Prontuario", "Prontuario")
                        .WithMany("Atendimentos")
                        .HasForeignKey("ProntuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Profissional");

                    b.Navigation("Prontuario");
                });

            modelBuilder.Entity("Hospisim.Models.Exame", b =>
                {
                    b.HasOne("Hospisim.Models.Atendimento", "Atendimento")
                        .WithMany("Exames")
                        .HasForeignKey("AtendimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atendimento");
                });

            modelBuilder.Entity("Hospisim.Models.Internacao", b =>
                {
                    b.HasOne("Hospisim.Models.Atendimento", "Atendimento")
                        .WithOne("Internacao")
                        .HasForeignKey("Hospisim.Models.Internacao", "AtendimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atendimento");
                });

            modelBuilder.Entity("Hospisim.Models.Prescricao", b =>
                {
                    b.HasOne("Hospisim.Models.Atendimento", "Atendimento")
                        .WithMany("Prescricoes")
                        .HasForeignKey("AtendimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospisim.Models.ProfissionalDeSaude", "Profissional")
                        .WithMany("Prescricoes")
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Atendimento");

                    b.Navigation("Profissional");
                });

            modelBuilder.Entity("Hospisim.Models.ProfissionalDeSaude", b =>
                {
                    b.HasOne("Hospisim.Models.Especialidade", "Especialidade")
                        .WithMany("Profissionais")
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialidade");
                });

            modelBuilder.Entity("Hospisim.Models.Prontuario", b =>
                {
                    b.HasOne("Hospisim.Models.Paciente", "Paciente")
                        .WithMany("Prontuarios")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Hospisim.Models.Atendimento", b =>
                {
                    b.Navigation("Exames");

                    b.Navigation("Internacao");

                    b.Navigation("Prescricoes");
                });

            modelBuilder.Entity("Hospisim.Models.Especialidade", b =>
                {
                    b.Navigation("Profissionais");
                });

            modelBuilder.Entity("Hospisim.Models.Internacao", b =>
                {
                    b.Navigation("AltaHospitalar");
                });

            modelBuilder.Entity("Hospisim.Models.Paciente", b =>
                {
                    b.Navigation("Atendimentos");

                    b.Navigation("Prontuarios");
                });

            modelBuilder.Entity("Hospisim.Models.ProfissionalDeSaude", b =>
                {
                    b.Navigation("Atendimentos");

                    b.Navigation("Prescricoes");
                });

            modelBuilder.Entity("Hospisim.Models.Prontuario", b =>
                {
                    b.Navigation("Atendimentos");
                });
#pragma warning restore 612, 618
        }
    }
}
